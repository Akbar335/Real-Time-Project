üöÄ Real-Time DevOps Project: Application Deployment on Kubernetes using Jenkins
Tech Stack

SCM: GitHub / GitLab / Bitbucket

CI/CD Tool: Jenkins (Pipeline as Code with Jenkinsfile)

Code Quality: SonarQube

Artifact Management: Nexus Repository Manager (Maven / Docker Registry)

Containerization: Docker

Orchestration: Kubernetes (EKS/AKS/GKE or Minikube for practice)

Testing: JUnit / PyTest / Selenium (depending on app type)

End-to-End Flow

Code Commit (Dev Stage)

Developers commit code to GitHub repository.

A Jenkinsfile defines the pipeline stages.

Jenkins Triggers (CI Start)

Webhook triggers Jenkins pipeline on git push / PR merge.

Pipeline starts with checkout from Git.

Build & Compile

For Java ‚Üí mvn clean install

For Node ‚Üí npm install && npm build

Code Quality Analysis (SonarQube)

Jenkins integrates with SonarQube plugin.

Runs static code analysis, checks vulnerabilities & code smells.

Pipeline can fail early if quality gate is not passed.

Unit Testing / Integration Testing

Jenkins runs JUnit / PyTest / Selenium.

Test reports are published in Jenkins.

Build Docker Image

Dockerfile inside repo.

Jenkins builds Docker image ‚Üí docker build -t myapp:build-${BUILD_ID} .

Push to Nexus / Docker Registry

Jenkins pushes image ‚Üí Nexus3 (Docker Registry) or DockerHub.

Example: docker push nexus.example.com/myapp:build-${BUILD_ID}

Deploy to Kubernetes

Jenkins applies Kubernetes manifests (deployment.yml, service.yml).

Uses kubectl apply -f k8s/ or Helm charts.

Deployment strategy: Rolling Update / Blue-Green.

Post-Deployment Verification

Smoke tests run against deployed service.

Jenkins marks build as SUCCESS / FAILED.

Monitoring & Feedback

Integrate with Prometheus + Grafana for monitoring.

Slack/MS Teams notifications for build status.

Jenkins Pipeline (Sample Jenkinsfile)

Here‚Äôs a simplified scripted pipeline for your project:

pipeline {
    agent any
    
    tools {
        maven 'Maven3'
        jdk 'JDK11'
    }
    
    environment {
        REGISTRY = "nexus.example.com"
        IMAGE = "myapp"
        VERSION = "build-${BUILD_ID}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/your-org/myapp.git'
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean install'
                junit '**/target/surefire-reports/*.xml'
            }
        }

        stage('Code Analysis - SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh """
                docker build -t $REGISTRY/$IMAGE:$VERSION .
                docker push $REGISTRY/$IMAGE:$VERSION
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh """
                kubectl set image deployment/myapp myapp=$REGISTRY/$IMAGE:$VERSION -n mynamespace
                kubectl rollout status deployment/myapp -n mynamespace
                """
            }
        }
    }
    
    post {
        success {
            echo "‚úÖ Deployment Successful!"
        }
        failure {
            echo "‚ùå Pipeline Failed!"
        }
    }
}

Kubernetes Manifest (deployment.yml)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: mynamespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: nexus.example.com/myapp:latest
        ports:
        - containerPort: 8080


‚úÖ This project covers:

Code checkout (Git)

Static analysis (SonarQube)

Build & Testing (Maven, JUnit)

Artifact management (Nexus)

Containerization (Docker)

Orchestration (Kubernetes deployment)

CI/CD automation (Jenkins Pipeline)
